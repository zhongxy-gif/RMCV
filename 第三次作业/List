#include <iostream>
#include <vector>
#include <set>
#include <unordered_set>
#include <string>
#include <sstream>

using namespace std;

struct Sequence {
    multiset<int> data;  // 使用multiset存储数据，自动排序

    void clear() {
        data.clear();
    }

    void add(int num) {
        data.insert(num);
    }

    void merge(Sequence& other) {
        data.insert(other.data.begin(), other.data.end());
        other.clear();
    }

    void unique() {
        unordered_set<int> seen;
        multiset<int> new_set;
        for (int num : data) {
            if (seen.find(num) == seen.end()) {
                seen.insert(num);
                new_set.insert(num);
            }
        }
        data = new_set;
    }

    void out() {
        if (data.empty()) {
            cout << endl;
            return;
        }
        auto it = data.begin();
        cout << *it;
        for (++it; it != data.end(); ++it) {
            cout << " " << *it;
        }
        cout << endl;
    }
};

int main() {
    int n;
    cin >> n;
    vector<Sequence> sequences(10000);  // 初始化10000个序列

    string line;
    getline(cin, line);  // 读取换行符

    for (int i = 0; i < n; i++) {
        getline(cin, line);
        stringstream ss(line);
        string command;
        ss >> command;

        if (command == "new") {
            int id;
            ss >> id;
            sequences[id].clear();
        } else if (command == "add") {
            int id, num;
            ss >> id >> num;
            sequences[id].add(num);
        } else if (command == "merge") {
            int id1, id2;
            ss >> id1 >> id2;
            if (id1 == id2) continue;
            sequences[id1].merge(sequences[id2]);
        } else if (command == "unique") {
            int id;
            ss >> id;
            sequences[id].unique();
        } else if (command == "out") {
            int id;
            ss >> id;
            sequences[id].out();
        }
    }

    return 0;
}
    
